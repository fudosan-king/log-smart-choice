<?php

namespace App\Http\Controllers;


use App\Http\Traits\CustomAdminVoyager;
use App\Models\Post;
use App\Models\PostImage;
use App\Models\TagPost;
use Exception;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use TCG\Voyager\Events\BreadDataUpdated;
use TCG\Voyager\Facades\Voyager;
use TCG\Voyager\Http\Controllers\VoyagerBaseController;

class PostController extends VoyagerBaseController
{

    use CustomAdminVoyager;

    /**
     * @param Request $request
     * @return mixed
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function index(Request $request)
    {
        return parent::index($request); // TODO: Change the autogenerated stub
    }

    public function edit(Request $request, $id)
    {
        $slug = $this->getSlug($request);

        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();

        if (strlen($dataType->model_name) != 0) {
            $model = app($dataType->model_name);
            $query = $model->query();

            // Use withTrashed() if model uses SoftDeletes and if toggle is selected
            if ($model && in_array(SoftDeletes::class, class_uses_recursive($model))) {
                $query = $query->withTrashed();
            }
            if ($dataType->scope && $dataType->scope != '' && method_exists($model, 'scope' . ucfirst($dataType->scope))) {
                $query = $query->{$dataType->scope}();
            }
            $dataTypeContent = call_user_func([$query, 'findOrFail'], $id);
        } else {
            // If Model doest exist, get data from table name
            $dataTypeContent = DB::table($dataType->name)->where('id', $id)->first();
        }

        foreach ($dataType->editRows as $key => $row) {
            $dataType->editRows[$key]['col_width'] = isset($row->details->width) ? $row->details->width : 100;
        }

        // If a column has a relationship associated with it, we do not want to show that field
        $this->removeRelationshipField($dataType, 'edit');

        // Check permission
        $this->authorize('edit', $dataTypeContent);

        // Check if BREAD is Translatable
        $isModelTranslatable = is_bread_translatable($dataTypeContent);

        // Eagerload Relations
        $this->eagerLoadRelations($dataTypeContent, $dataType, 'edit', $isModelTranslatable);

        $view = 'voyager::bread.edit-add';

        // get tab search
        $tagsPost = TagPost::where('status', TagPost::STATUS_ACTIVE)->get();
        $postInfo = '';
        $postImage = PostImage::where('post_id', $id)->get();
        if ($postImage) {
            $postInfo = $postImage;
        }

        $post = Post::where('id', $id)->get();
        $post[0]->content = str_replace("'", '', $post[0]->content);
        $post[0]->content = preg_replace('#(\\\r|\\\r\\\n|\\\n)#', '', $post[0]->content);

        // get tab seleted
        $tagSelected = [];
        if ($post[0]->tag_post_id) {
            $tagSelected = explode(',', $post[0]->tag_post_id);
        }

        // get list page
        $pageSelected = $post[0]->page_post;
        $pagesName = Storage::get('/public/pages/page_list.json');
        $listPage = json_decode($pagesName, true);

        if (view()->exists("voyager::$slug.edit-add")) {
            $view = "voyager::$slug.edit-add";
        }

        return Voyager::view($view, compact(
            'dataType',
            'dataTypeContent',
            'isModelTranslatable',
            'tagsPost',
            'tagSelected',
            'postInfo',
            'listPage',
            'pageSelected',
            'post'
        ));
    }

    public function update(Request $request, $id)
    {
        $slug = $this->getSlug($request);

        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();
        // Compatibility with Model binding.
        $id = $id instanceof \Illuminate\Database\Eloquent\Model ? $id->{$id->getKeyName()} : $id;

        $model = app($dataType->model_name);
        $query = $model->query();
        if ($dataType->scope && $dataType->scope != '' && method_exists($model, 'scope' . ucfirst($dataType->scope))) {
            $query = $query->{$dataType->scope}();
        }
        if ($model && in_array(SoftDeletes::class, class_uses_recursive($model))) {
            $query = $query->withTrashed();
        }

        $data = $query->findOrFail($id);

        DB::beginTransaction();
        try {
            $post = Post::find($id);
            $post->title = $request->title_package;
            $post->title_signal = $request->title_signal;
            $post->page_post = $request->page_post;
            $post->content = $request->description[0];
            $post->tag_post_id = isset($request->tag_post) ? implode(',', $request->tag_post) : '';

            if (isset($request->estate_main_photo[0])) {
                if (File::exists(public_path($post->title_image))) {
                    File::delete(public_path($post->title_image));
                }
                $post->title_image = $this->uploadImage($request->page_post, $request->estate_main_photo[0], 'title_image');
            }

            if (isset($request->estate_image[0])) {
                if (File::exists(public_path($post->top_image))) {
                    File::delete(public_path($post->top_image));
                }
                $post->top_image = $this->uploadImage($request->page_post, $request->estate_image[0], 'top_image');
            }

            if ($request->has('post_main_photo_hidden')) {
                $imageMainCount = count($request->get('post_main_photo_hidden'));
                $postImagesdelete = PostImage::where('post_id', $id)->get();
                foreach($postImagesdelete as $image) {
                    if (File::exists(public_path($image->title_image))) {
                        File::delete(public_path($image->image_url));
                    }
                }
                PostImage::where('post_id', $id)->delete();
                for ($i = 0; $i < $imageMainCount; $i++) {
                    $urlImageMain = $request->get('post_main_photo_hidden')[$i];
                    if (isset($request->file('post_main_photo')[$i])) {
                        $imagePostPage = $request->file('post_main_photo')[$i];
                        $urlImageMain = $this->uploadImage($request->page_post, $imagePostPage, 'post_image', $i);
                    }
                    if ($i <= 2) {
                        if ($i == 0) {
                            $classCss = 'bottom-img_left';
                        } elseif ($i == 1) {
                            $classCss = 'bottom-img_right';
                        } else {
                            $classCss = 'bottom-img_full';
                        }
                        $postImage = new PostImage();
                        $postImage->image_url = $urlImageMain;
                        $postImage->class_css = $classCss;
                        $postImage->post_id = $post->id;
                        $postImage->save();
                    }
                }
            }

            $post->save();
            DB::commit();
        } catch (Exception $e) {
            Log::error($e->getMessage());
            DB::rollBack();
        }


        // Check permission
        $this->authorize('edit', $data);

        // Validate fields with ajax
        $val = $this->validateBread($request->all(), $dataType->editRows, $dataType->name, $id)->validate();

        // Get fields with images to remove before updating and make a copy of $data
        $to_remove = $dataType->editRows->where('type', 'image')
            ->filter(function ($item, $key) use ($request) {
                return $request->hasFile($item->field);
            });
        $original_data = clone ($data);

        $this->insertUpdateData($request, $slug, $dataType->editRows, $data);

        // Delete Images
        $this->deleteBreadImages($original_data, $to_remove);

        event(new BreadDataUpdated($dataType, $data));

        if (auth()->user()->can('browse', app($dataType->model_name))) {
            $redirect = redirect()->route("voyager.{$dataType->slug}.index");
        } else {
            $redirect = redirect()->back();
        }

        return $redirect->with([
            'message'    => __('voyager::generic.successfully_updated') . " {$dataType->getTranslatedAttribute('display_name_singular')}",
            'alert-type' => 'success',
        ]);
    }

    public function create(Request $request)
    {
        $slug = $this->getSlug($request);

        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();

        // Check permission
        $this->authorize('add', app($dataType->model_name));

        $dataTypeContent = (strlen($dataType->model_name) != 0)
            ? new $dataType->model_name()
            : false;

        foreach ($dataType->addRows as $key => $row) {
            $dataType->addRows[$key]['col_width'] = $row->details->width ?? 100;
        }

        // If a column has a relationship associated with it, we do not want to show that field
        $this->removeRelationshipField($dataType, 'add');

        // Check if BREAD is Translatable
        $isModelTranslatable = is_bread_translatable($dataTypeContent);

        // get tab search
        $tagSelected = [];
        $tagsPost = TagPost::where('status', TagPost::STATUS_ACTIVE)->get();

        // get list page
        $pageSelected = '';
        $pagesName = Storage::get('/public/pages/page_list.json');
        $listPage = json_decode($pagesName, true);
        // Eagerload Relations
        $this->eagerLoadRelations($dataTypeContent, $dataType, 'add', $isModelTranslatable);

        $view = 'voyager::bread.edit-add';

        if (view()->exists("voyager::$slug.edit-add")) {
            $view = "voyager::$slug.edit-add";
        }
        $post = $postInfo = $dataTypeContent;

        return Voyager::view($view, compact(
            'dataType',
            'dataTypeContent',
            'isModelTranslatable',
            'tagsPost',
            'tagSelected',
            'postInfo',
            'listPage',
            'pageSelected',
            'post'
        ));
    }

    /**
     * POST BRE(A)D - Store data.
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\RedirectResponse
     */
    public function store(Request $request)
    {
        $slug = $this->getSlug($request);

        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();

        // Check permission
        $this->authorize('add', app($dataType->model_name));

        $request->validate([
            'title_package' => 'required',
            'title_image' => 'image|mimes:jpeg,png,jpg,gif,svg',
            'top_image' => 'image|mimes:jpeg,png,jpg,gif,svg',
            // 'post_main_photo' => 'image|mimes:jpeg,png,jpg,gif,svg'
        ]);

        $content = '';
        if (isset($request->description[0])) {
            $content = DB::connection()->getPdo()->quote($request->description[0]);
        }

        // Validate fields with ajax
        $this->validateBread($request->all(), $dataType->addRows)->validate();
        // $data = $this->insertUpdateData($request, $slug, $dataType->addRows, new $dataType->model_name());

        $postImages = $request->post_main_photo;
        try {
            $post = new Post();
            $post->title = $request->title_package;
            $post->title_signal = $request->title_signal;
            $post->title_image = $this->uploadImage($request->page_post, $request->estate_main_photo[0], 'title_image');
            $post->tag_post_id = is_array($request->tag_post) ? implode(',', $request->tag_post) : '';
            $post->top_image = $this->uploadImage($request->page_post, $request->estate_image[0], 'top_image');
            $post->content = $content;
            $post->status = $request->status;
            $post->page_post = $request->page_post;
            $post->save();

            $postImages = $request->post_main_photo;
            $classCss = '';
            foreach ($postImages as $key => $image) {
                if ($key <= 2) {
                    if ($key == 0) {
                        $classCss = 'bottom-img_left';
                    } elseif ($key == 1) {
                        $classCss = 'bottom-img_right';
                    } else {
                        $classCss = 'bottom-img_full';
                    }
                    $postImage = new PostImage();
                    $postImage->image_url = $this->uploadImage($request->page_post, $image, 'post_image', $key);
                    $postImage->class_css = $classCss;
                    $postImage->post_id = $post->id;
                    $postImage->save();
                }
            }
        } catch (Exception $e) {
            Log::error($e->getMessage());
        }


        // event(new BreadDataAdded($dataType, $data));

        if (!$request->has('_tagging')) {
            if (auth()->user()->can('browse', $post)) {
                $redirect = redirect()->route("voyager.{$dataType->slug}.index");
            } else {
                $redirect = redirect()->back();
            }

            return $redirect->with([
                'message'    => __('voyager::generic.successfully_added_new') . " {$dataType->getTranslatedAttribute('display_name_singular')}",
                'alert-type' => 'success',
            ]);
        } else {
            return response()->json(['success' => true, 'data' => $post]);
        }
    }

    private function uploadImage($pageName, $image, $local, $index = 0)
    {
        $urlPath = '';
        if ($image) {
            $fileName = date('Ymd_His') . $index;
            $path = '/posts/' . $pageName . '/' . $local;
            $publicPath = public_path() . $path;
            if (!is_dir($publicPath)) {
                mkdir($publicPath, 0777, true);
            }
            $ext = $image->getClientOriginalExtension();
            $urlPath = $path . '/' . $fileName . '.' . $ext;
            $image->move($publicPath, $fileName . '.' . $ext);
        }
        return $urlPath;
    }
}
