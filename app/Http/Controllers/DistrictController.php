<?php


namespace App\Http\Controllers;


use App\Http\Traits\CustomAdminVoyager;
use App\Models\City;
use App\Models\District;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use TCG\Voyager\Facades\Voyager;
use TCG\Voyager\Http\Controllers\VoyagerBaseController;
use TCG\Voyager\Models\DataRow;
use TCG\Voyager\Models\DataType;

class DistrictController extends VoyagerBaseController
{

    use CustomAdminVoyager;

    protected $colDistrictCode = 0;

    protected $colCityName = 1;

    protected $colDistrictName = 2;

    public function index(Request $request)
    {
        return parent::index($request); // TODO: Change the autogenerated stub
    }

    public function indexDistrictImport(Request $request)
    {
        // GET THE SLUG, ex. 'posts', 'pages', etc.
        $slug = 'district';
        // GET THE DataType based on the slug
        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();

        // Check permission
        $this->authorize('browse', app($dataType->model_name));

        $getter = $dataType->server_side ? 'paginate' : 'get';

        $search = (object)['value' => $request->get('s'), 'key' => $request->get('key'), 'filter' => $request->get('filter')];

        $searchNames = [];
        if ($dataType->server_side) {
            $searchAble = Voyager::model('DataRow')->whereDataTypeId($dataType->id)->orderBy('order')->where('browse', 1)->get();
            foreach ($searchAble as $key => $value) {
                $displayName = ucwords(str_replace('_', ' ', $value->field));
                $searchNames[$value->field] = $displayName;
            }
        }

        $orderBy = $request->get('order_by', $dataType->order_column);
        $sortOrder = $request->get('sort_order', $dataType->order_direction);

        // Next Get or Paginate the actual content from the MODEL that corresponds to the slug DataType
        if (strlen($dataType->model_name) != 0) {
            $model = app($dataType->model_name);

            if ($dataType->scope && $dataType->scope != '' && method_exists($model, 'scope' . ucfirst($dataType->scope))) {
                $query = $model->{$dataType->scope}();
            } else {
                $query = $model::select('*');
            }

            // Use withTrashed() if model uses SoftDeletes and if toggle is selected
            if ($model && in_array(SoftDeletes::class, class_uses_recursive($model)) && Auth::user()->can('delete', app($dataType->model_name))) {
                $usesSoftDeletes = true;

                if ($request->get('showSoftDeleted')) {
                    $showSoftDeleted = true;
                    $query = $query->withTrashed();
                }
            }

            // If a column has a relationship associated with it, we do not want to show that field
            $this->removeRelationshipField($dataType, 'browse');

            if ($search->value != '' && $search->key && $search->filter) {
                $search_filter = ($search->filter == 'equals') ? '=' : 'LIKE';
                $search_value = ($search->filter == 'equals') ? $search->value : '%' . $search->value . '%';
                $query->where($search->key, $search_filter, $search_value);
            }

            if ($orderBy && in_array($orderBy, $dataType->fields())) {
                $querySortOrder = (!empty($sortOrder)) ? $sortOrder : 'desc';
                $dataTypeContent = call_user_func([
                    $query->orderBy($orderBy, $querySortOrder),
                    $getter,
                ]);
            } elseif ($model->timestamps) {
                $dataTypeContent = call_user_func([$query->latest($model::CREATED_AT), $getter]);
            } else {
                $dataTypeContent = call_user_func([$query->orderBy($model->getKeyName(), 'DESC'), $getter]);
            }

            // Replace relationships' keys for labels and create READ links if a slug is provided.
            $dataTypeContent = $this->resolveRelations($dataTypeContent, $dataType);
        } else {
            // If Model doesn't exist, get data from table name
            $dataTypeContent = call_user_func([DB::table($dataType->name), $getter]);
            $model = false;
        }

        // Check if BREAD is Translatable
        $isModelTranslatable = is_bread_translatable($model);

        // Eagerload Relations
        $this->eagerLoadRelations($dataTypeContent, $dataType, 'browse', $isModelTranslatable);

        $view = 'vendor.voyager.district.import';
        return Voyager::view($view, compact(
            'dataType'
        ));
    }

    public function importDistrict(Request $request)
    {
        DB::beginTransaction();
        try {
            $fileExt = $request->file('import_file')->getClientOriginalExtension();
            if ($fileExt != 'csv') {
                return redirect()->back()->with([
                    'message'    => 'Wrong format',
                    'alert-type' => 'error',
                ]);
            }
            $fileNameToStore = 'importDistrict' . '-' . date('Y-m-d') . '.' . $fileExt;
            $request->file('import_file')->storeAs('public/district/', $fileNameToStore);
            $row = 1;
            $errors = [];

            // read file
            if (($handle = fopen(storage_path('app/public/district/' . $fileNameToStore), "r")) !== FALSE) {
                while (($data = fgetcsv($handle, 5000, ",")) !== FALSE) {
                    $num = count($data);
                    $isRowError = false;
                    for ($i = 0; $i < $num; $i++) {
                        if ($i == $this->colCityName || $i == $this->colDistrictName) {
                            // validate empty value
                            if (empty($data[$i])) {
                                $errors[][$i] = 'Row:' . $row . ', data: ' . $data[$i] . ' is not empty ';
                                $isRowError = true;
                                continue;
                            }

                            // validate japanese
                            if (!preg_match('/[\x{4E00}-\x{9FBF}\x{3040}-\x{309F}\x{30A0}-\x{30FF}]/u', $data[$i])) {
                                $errors[][$i] = 'Row: ' . $row . ', data: ' . $data[$i] . ' in not japanese ';
                                $isRowError = true;
                                continue;
                            }

                            // special character
                            if (preg_match("/[!@#$%^&*(),.?\":{}|<>]/i", $data[$i])) {
                                $errors[][$i] = 'Row: ' . $row . ', data: ' . $data[$i] . ' in not special character ';
                                $isRowError = true;
                                continue;
                            }
                            // $this->_importData($data[$i], $i, $request);
                        }
                    }
                    if (!$isRowError) {
                        $this->_importDataWithCode($data, $request);
                    }
                    $row++;
                }
                fclose($handle);
            }
            if (!empty($errors)) {
                DB::rollBack();
                return redirect()->back()->with([
                    'message'    => 'Import fail',
                    'alert-type' => 'error',
                ])->withErrors($errors);
            }

            $allCity = $this->getCities();
            $slug = DataType::where('slug', 'district')->first();

            DataRow::where('data_type_id', $slug->id)->where('field', 'city_id')->update(['details' => ["options" => $allCity, "default" => array_shift($allCity)]]);

            DB::commit();
            $request->session()->forget('cityId');
            return redirect()->back()->with([
                'message'    => 'Import success',
                'alert-type' => 'success',
            ]);
        } catch (\Exception $e) {
            DB::rollback();
            Log::error($e->getMessage());
            return redirect()->back()->with([
                'message'    => 'Import fail',
                'alert-type' => 'error',
            ]);
        }
    }

    /**
     * @param $data
     */
    private function _importData($data, $i, $request)
    {
        if ($i == $this->colCityName) {
            City::upsert([['name' => $data],], ['name']);
            $city = City::where('name', $data)->first();
            $request->session()->put('cityId', $city->id);
            Log::error("city: " . $city->id);
        }

        if ($i == $this->colDistrictName) {
            if ($request->session()->has('cityId')) {
                $cityId = $request->session()->get('cityId', 0);
                Log::error("cityID: " . $cityId);
                District::upsert([['name' => $data, 'city_id' => $cityId],], ['name']);
            }
            $request->session()->forget('cityId');
        }
    }
    /**
     * @param $data
     */
    private function _importDataWithCode($data, $request)
    {
        if (!empty($data[$this->colCityName])) {
            $cityName = $data[$this->colCityName];
            City::upsert([['name' => $cityName],], ['name']);
            $city = City::where('name', $cityName)->first();
            $request->session()->put('cityId', $city->id);
            Log::error("city: " . $city->id);
        }

        if (!empty($data[$this->colDistrictName]) && !empty($data[$this->colDistrictCode])) {
            
            if ($request->session()->has('cityId')) {
                $code = $data[$this->colDistrictCode];
                $name = $data[$this->colDistrictName];
                $cityId = $request->session()->get('cityId', 0);
                Log::error("cityID: " . $cityId);
                District::upsert([['code' => $code, 'name' => $name, 'city_id' => $cityId]], ['name', 'city_id'], ['code']);
            }
            $request->session()->forget('cityId');
        }
    }

    public function edit(Request $request, $id)
    {
        $slug = $this->getSlug($request);

        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();

        if (strlen($dataType->model_name) != 0) {
            $model = app($dataType->model_name);
            $query = $model->query();

            // Use withTrashed() if model uses SoftDeletes and if toggle is selected
            if ($model && in_array(SoftDeletes::class, class_uses_recursive($model))) {
                $query = $query->withTrashed();
            }
            if ($dataType->scope && $dataType->scope != '' && method_exists($model, 'scope'.ucfirst($dataType->scope))) {
                $query = $query->{$dataType->scope}();
            }
            $dataTypeContent = call_user_func([$query, 'findOrFail'], $id);
        } else {
            // If Model doest exist, get data from table name
            $dataTypeContent = DB::table($dataType->name)->where('id', $id)->first();
        }

        foreach ($dataType->editRows as $key => $row) {
            $dataType->editRows[$key]['col_width'] = isset($row->details->width) ? $row->details->width : 100;
        }

        $district = District::findorFail($id);

        // If a column has a relationship associated with it, we do not want to show that field
        $this->removeRelationshipField($dataType, 'edit');

        // Check permission
        $this->authorize('edit', $dataTypeContent);

        // Check if BREAD is Translatable
        $isModelTranslatable = is_bread_translatable($dataTypeContent);

        // Eagerload Relations
        $this->eagerLoadRelations($dataTypeContent, $dataType, 'edit', $isModelTranslatable);

        $view = 'voyager::bread.edit-add';

        if (view()->exists("voyager::$slug.edit-add")) {
            $view = "voyager::$slug.edit-add";
        }
        $edit = true;
        return Voyager::view($view, compact('dataType', 'dataTypeContent', 'isModelTranslatable', 'edit', 'district'));
    }

    // POST BR(E)AD
    public function update(Request $request, $id)
    {
        $slug = $this->getSlug($request);

        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();

        // Compatibility with Model binding.
        $id = $id instanceof \Illuminate\Database\Eloquent\Model ? $id->{$id->getKeyName()} : $id;

        $model = app($dataType->model_name);
        $query = $model->query();
        if ($dataType->scope && $dataType->scope != '' && method_exists($model, 'scope'.ucfirst($dataType->scope))) {
            $query = $query->{$dataType->scope}();
        }
        if ($model && in_array(SoftDeletes::class, class_uses_recursive($model))) {
            $query = $query->withTrashed();
        }

        $data = $query->findOrFail($id);

        // $data->romaji_name = $request->get('romaji_name');

        // Check permission
        $this->authorize('edit', $data);
        
        // dd($data);
        // Validate fields with ajax
        $val = $this->validateBread($request->all(), $dataType->editRows, $dataType->name, $id)->validate();

        // Get fields with images to remove before updating and make a copy of $data
        $to_remove = $dataType->editRows->where('type', 'image')
            ->filter(function ($item, $key) use ($request) {
                return $request->hasFile($item->field);
            });
        $original_data = clone($data);

        $this->insertUpdateData($request, $slug, $dataType->editRows, $data);

        // Delete Images
        $this->deleteBreadImages($original_data, $to_remove);

        if (auth()->user()->can('browse', app($dataType->model_name))) {
            $redirect = redirect()->route("voyager.{$dataType->slug}.index");
        } else {
            $redirect = redirect()->back();
        }

        return $redirect->with([
            'message'    => __('voyager::generic.successfully_updated')." {$dataType->getTranslatedAttribute('display_name_singular')}",
            'alert-type' => 'success',
        ]);
    }
}