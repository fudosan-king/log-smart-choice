<?php

namespace App\Http\Controllers;

use App\Http\Requests\ImportManagementSystemRequest;
use App\Models\Station;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use TCG\Voyager\Http\Controllers\VoyagerBaseController;
use Illuminate\Support\Facades\DB;

/**
 * Class ImportManagementSystemController
 * @package App\Http\Controllers
 */
class ImportManagementSystemController extends VoyagerBaseController
{
    /**
     * @param Request $request
     * @return mixed
     */
    public function index(Request $request)
    {
        return parent::index($request); // TODO: Change the autogenerated stub
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function importStation(Request $request)
    {
        
        $colRegionCode = 0;
        $colTranCompanyCode = 1;
        $colStationCode = 2;
        $colTranCompanyFullName = 3;
        $colTranCompanyShortName = 4;
        $colStationOldName = 5;
        $colStationName = 6;
        $colNumberChange = 7;
        $colValueChange = 8;

        $validateGroup = array(
            $colTranCompanyFullName = 3,
            $colTranCompanyShortName = 4,
            // $colStationOldName = 5,
            $colStationName = 6,
        );

        DB::beginTransaction();
        try {
            $fileExt = $request->file('import_file')->getClientOriginalExtension();
            if ($fileExt != 'csv') {
                return redirect()->back()->with([
                    'message'    => 'Wrong format',
                    'alert-type' => 'error',
                ]);
            }
            $fileNameToStore = 'importStation' . '-' . date('Y-m-d') . '.' . $fileExt;
            $request->file('import_file')->storeAs('public/station/', $fileNameToStore);
            $row = 1;
            $errors = [];

            // read file
            if (($handle = fopen(storage_path('app/public/station/' . $fileNameToStore), "r")) !== FALSE) {
                $dataImport = array();
                while (($data = fgetcsv($handle, 5000, ",")) !== FALSE) {
                    $isRowError = false;
                    foreach($validateGroup as $validateItem) {
                        if (empty($data[$validateItem])) {
                            $errors[][$validateItem] = 'Row:' . $row . ', data: ' . $data[$validateItem] . ' is not empty ';
                            $isRowError = 'Row:' . $row . ', data: ' . $data[$validateItem] . ' is not empty ';
                            break;
                        }

                        // validate japanese
                        if (!preg_match('/[\x{4E00}-\x{9FBF}\x{3040}-\x{309F}\x{30A0}-\x{30FF}]/u', $data[$validateItem])) {
                            $errors[][$validateItem] = 'Row: ' . $row . ', data: ' . $data[$validateItem] . ' is not japanese ';
                            $isRowError = 'Row: ' . $row . ', data: ' . $data[$validateItem] . ' is not japanese ';
                            break;
                        }

                        // special character
                        if (preg_match("/[!@#$%^&*(),.?\":{}|<>]/i", $data[$validateItem])) {
                            $errors[][$validateItem] = 'Row: ' . $row . ', data: ' . $data[$validateItem] . 'in not special character ';
                            $isRowError = 'Row: ' . $row . ', data: ' . $data[$validateItem] . 'in not special character ';
                            break;
                        }
                    }
                    if (!$isRowError) {
                        $dataImport = array(
                            'region_code' => intval($data[$colRegionCode]),
                            'tran_company_code' => intval($data[$colTranCompanyCode]),
                            'station_code' => intval($data[$colStationCode]),
                            'tran_company_full_name' => trim($data[$colTranCompanyFullName]),
                            'tran_company_short_name' => trim($data[$colTranCompanyShortName]),
                            'old_name' => trim($data[$colStationOldName]),
                            'name' => trim($data[$colStationName]),
                            'number_change' => intval($data[$colNumberChange]),
                            'value_change' => intval($data[$colValueChange])
                        );
                    }
                    
                    $this->_importStationData($dataImport);
                    $row++;
                }
                fclose($handle);
            }

            if (!empty($errors)) {
                DB::rollBack();
                return redirect()->back()->with([
                    'message'    => 'Import fail',
                    'alert-type' => 'error',
                ])->withErrors($errors);
            }

            DB::commit();

            return redirect()->back()->with([
                'message'    => 'Import success',
                'alert-type' => 'success',
            ]);
        } catch (\Exception $e) {
            DB::rollback();
            Log::error($e->getMessage());
            return redirect()->back()->with([
                'message'    => 'Import fail',
                'alert-type' => 'error',
            ]);
        }
    }

    /**
     * @param $data
     */
    private function _importStationData($data)
    {
        $colUpdate = array(
            'region_code',
            'tran_company_code',
            'station_code',
            'tran_company_full_name',
            'tran_company_short_name',
            'old_name',
            'number_change',
            'value_change'
        );
        Station::upsert([$data], ['name'], $colUpdate);
    }
}
