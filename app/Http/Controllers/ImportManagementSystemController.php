<?php

namespace App\Http\Controllers;

use App\Models\Station;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use TCG\Voyager\Http\Controllers\VoyagerBaseController;
use Illuminate\Support\Facades\DB;

/**
 * Class ImportManagementSystemController
 * @package App\Http\Controllers
 */
class ImportManagementSystemController extends VoyagerBaseController
{
    /**
     * @param Request $request
     * @return mixed
     */
    public function index(Request $request)
    {
        return parent::index($request); // TODO: Change the autogenerated stub
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function import(Request $request)
    {
        DB::beginTransaction();
        try {
            $fileExt = $request->file('import_file')->getClientOriginalExtension();
            if ($fileExt != 'csv') {
                return redirect()->back()->with([
                    'message'    => 'Wrong format',
                    'alert-type' => 'error',
                ]);
            }
            $fileNameToStore = 'importStation' . '-' . date('Y-m-d') . '.' . $fileExt;
            $request->file('import_file')->storeAs('public/station/', $fileNameToStore);
            $row = 1;
            $errors = [];

            // read file
            if (($handle = fopen(storage_path('app/public/station/' . $fileNameToStore), "r")) !== FALSE) {
                while (($data = fgetcsv($handle, 5000, ",")) !== FALSE) {
                    $num = count($data);
                    for ($i = 0; $i < $num; $i++) {
                        if ($i != 0) {
                            if ($i % 6 == 0) {

                                // validate empty value
                                if (empty($data[$i])) {
                                    $errors[][$i] = 'Row:' . $row . ', data: ' . $data[$i] . ' is not empty ';
                                    continue;
                                }

                                // validate japanese
                                if (!preg_match('/[\x{4E00}-\x{9FBF}\x{3040}-\x{309F}\x{30A0}-\x{30FF}]/u', $data[$i])) {
                                    $errors[][$i] = 'Row: ' . $row . ', data: ' . $data[$i] . 'in not japanese ';
                                    continue;
                                }

                                // special character
                                if (preg_match("/[!@#$%^&*(),.?\":{}|<>]/i", $data[$i])) {
                                    $errors[][$i] = 'Row: ' . $row . ', data: ' . $data[$i] . 'in not special character ';
                                    continue;
                                }
                                $this->_importData($data[$i]);
                            }
                        }
                    }
                    $row++;
                }
                fclose($handle);
            }

            if (!empty($errors)) {
                DB::rollBack();
                return redirect()->back()->with([
                    'message'    => 'Import fail',
                    'alert-type' => 'error',
                ])->withErrors($errors);
            }

            DB::commit();

            return redirect()->back()->with([
                'message'    => 'Import success',
                'alert-type' => 'success',
            ]);
        } catch (\Exception $e) {
            DB::rollback();
            Log::error($e->getMessage());
            return redirect()->back()->with([
                'message'    => 'Import fail',
                'alert-type' => 'error',
            ]);
        }
    }

    /**
     * @param $data
     */
    private function _importData($data)
    {
        Station::upsert([['name' => $data],], ['name']);
    }
}
